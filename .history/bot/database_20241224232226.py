import aiosqlite
from datetime import datetime, timedelta

DB_PATH = "database.db"

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS numbers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            number TEXT NOT NULL,
            user TEXT NOT NULL,
            status TEXT NOT NULL,
            timestamp DATETIME NOT NULL,
            hold_start DATETIME,
            hold_end DATETIME
        )
        """)
        await db.commit()

async def add_to_waiting(user, number):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        INSERT INTO numbers (number, user, status, timestamp)
        VALUES (?, ?, ?, ?)
        """, (number, user, "üîµ –û–∂–∏–¥–∞–Ω–∏–µ", datetime.now()))
        await db.commit()
        return f"–ù–æ–º–µ—Ä {number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è."

async def get_list_by_status(status, limit=20, offset=0):
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("""
        SELECT id, number, user, status, timestamp FROM numbers
        WHERE status = ?
        ORDER BY timestamp ASC
        LIMIT ? OFFSET ?
        """, (status, limit, offset)) as cursor:
            return await cursor.fetchall()

async def move_to_hold(number):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        UPDATE numbers
        SET status = ?, hold_start = ?, hold_end = ?
        WHERE number = ? AND status = ?
        """, ("üü† –•–æ–ª–¥–∏–Ω–≥", datetime.now(), datetime.now() + timedelta(hours=3), number, "üîµ –û–∂–∏–¥–∞–Ω–∏–µ"))
        changes = db.total_changes
        await db.commit()
        if changes > 0:
            return f"–ù–æ–º–µ—Ä {number} –≤–∑—è—Ç –≤ —Ö–æ–ª–¥."
        return f"–ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è."

async def mark_as_successful(number):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        UPDATE numbers
        SET status = ?, hold_end = ?
        WHERE number = ? AND status = ?
        """, ("üü¢ –£—Å–ø–µ—à–Ω–æ", datetime.now(), number, "üü† –•–æ–ª–¥–∏–Ω–≥"))
        changes = db.total_changes
        await db.commit()
        if changes > 0:
            return f"–ù–æ–º–µ—Ä {number} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ö–æ–ª–¥."
        return f"–ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ö–æ–ª–¥–∞."

async def mark_as_failed(number):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        UPDATE numbers
        SET status = ?, hold_end = ?
        WHERE number = ? AND status = ?
        """, ("üî¥ –°–ª–µ—Ç–µ–ª", datetime.now(), number, "üü† –•–æ–ª–¥–∏–Ω–≥"))
        changes = db.total_changes
        await db.commit()
        if changes > 0:
            return f"–ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π."
        return f"–ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ö–æ–ª–¥–∞."

async def clear_all():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM numbers")
        await db.commit()
        return "–í—Å–µ —Å–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã."
