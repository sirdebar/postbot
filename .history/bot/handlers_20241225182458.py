from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.middleware import FSMContextMiddleware
from aiogram.fsm.state import State, StatesGroup
from bot.utils import build_pagination_keyboard, format_list
from bot.database import (
    add_to_waiting, move_to_hold, mark_as_successful, mark_as_failed, clear_all,
    get_list_by_status, get_all_records, count_records, find_record_by_number
)

class SearchStates(StatesGroup):
    waiting_for_number = State()

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

def setup_handlers(dp: Dispatcher):
    dp.message.middleware(FSMContextMiddleware(storage=dp.storage))
    dp.callback_query.register(search_handler, lambda c: c.data.startswith("search:"))
    dp.message.register(number_search_handler, SearchStates.waiting_for_number)
    dp.message.register(add_number_handler, Command(commands=["a"]))
    dp.message.register(hold_number_handler, Command(commands=["c"]))
    dp.message.register(successful_number_handler, Command(commands=["success"]))
    dp.message.register(failed_number_handler, Command(commands=["s"]))
    dp.message.register(clear_all_handler, Command(commands=["clear"]))
    dp.message.register(get_waiting_list, Command(commands=["wl"]))
    dp.message.register(get_hold_list, Command(commands=["hl"]))
    dp.message.register(get_successful_list, Command(commands=["gl"]))
    dp.message.register(get_failed_list, Command(commands=["sl"]))
    dp.message.register(list_all_handler, Command(commands=["l"]))
    dp.message.register(help_handler, Command(commands=["help"]))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ –ø–æ–∏—Å–∫–∞
    dp.callback_query.register(paginate_list, lambda c: c.data.startswith("page:"))
    dp.callback_query.register(search_handler, lambda c: c.data.startswith("search:"))

async def paginate_list(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    _, status, current_page = callback.data.split(":")
    current_page = int(current_page)
    limit = 10
    offset = (current_page - 1) * limit

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ title
    if status == "all":
        records = await get_all_records(limit=limit, offset=offset)
        total_records = await count_records()
        title = "–û–±—â–∏–π —Å–ø–∏—Å–æ–∫"
    else:
        records = await get_list_by_status(status, limit=limit, offset=offset)
        total_records = await count_records(status)
        title = "–°–ø–∏—Å–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞

    total_pages = (total_records + limit - 1) // limit  # –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if not records:
        title = title or "–°–ø–∏—Å–æ–∫"
        response = f"{title} –ø—É—Å—Ç."  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    else:
        response = format_list(records, title, current_page, total_pages)  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞
    
    keyboard = build_pagination_keyboard(current_page, total_pages, status)

    await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="Markdown")

async def number_search_handler(message: Message, state: FSMContext):
    number = message.text.strip()
    record = await find_record_by_number(number)
    if record:
        response = f"–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä:\n" \
                   f"ID: {record[0]}\n" \
                   f"–ù–æ–º–µ—Ä: {record[1]}\n" \
                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{record[2]}\n" \
                   f"–°—Ç–∞—Ç—É—Å: {record[3]}\n" \
                   f"–î–∞—Ç–∞: {record[4]}"
    else:
        response = f"–ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    await message.reply(response)
    await state.clear()

async def search_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates.waiting_for_number)

async def add_number_handler(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: /a 123456789")
        return

    number = args[1]
    user_tag = message.from_user.username or "–ë–µ–∑ —Ç–µ–≥–∞"
    response = await add_to_waiting(user_tag, number)
    await message.reply(response)

async def list_all_handler(message: Message):
    """
    –í—ã–≤–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—â–µ–≥–æ —Å–ø–∏—Å–∫–∞.
    """
    limit = 10
    offset = 0
    current_page = 1

    total_records = await count_records()
    total_pages = (total_records + limit - 1) // limit
    records = await get_all_records(limit=limit, offset=offset)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ format_list
    response = format_list(records, "–û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages)

    await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")



async def hold_number_handler(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: /c 123456789")
        return

    number = args[1]
    response = await move_to_hold(number)
    await message.reply(response)

async def successful_number_handler(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: /success 123456789")
        return

    number = args[1]
    response = await mark_as_successful(number)
    await message.reply(response)

async def failed_number_handler(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: /s 123456789")
        return

    number = args[1]
    response = await mark_as_failed(number)
    await message.reply(response)

async def clear_all_handler(message: Message):
    response = await clear_all()
    await message.reply(response)

async def get_waiting_list(message: Message):
    limit = 10
    offset = 0
    current_page = 1

    total_records = await count_records("üîµ –û–∂–∏–¥–∞–Ω–∏–µ")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üîµ –û–∂–∏–¥–∞–Ω–∏–µ", limit=limit, offset=offset)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ format_list
    response = format_list(records, "–û–∂–∏–¥–∞–Ω–∏–µ", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üîµ –û–∂–∏–¥–∞–Ω–∏–µ")

    await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")


async def get_hold_list(message: Message):
    limit = 10
    offset = 0
    current_page = 1

    total_records = await count_records("üü† –•–æ–ª–¥–∏–Ω–≥")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üü† –•–æ–ª–¥–∏–Ω–≥", limit=limit, offset=offset)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ format_list
    response = format_list(records, "–•–æ–ª–¥–∏–Ω–≥", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üü† –•–æ–ª–¥–∏–Ω–≥")

    await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")


async def get_successful_list(message: Message):
    limit = 10
    offset = 0
    current_page = 1

    total_records = await count_records("üü¢ –£—Å–ø–µ—à–Ω–æ")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üü¢ –£—Å–ø–µ—à–Ω–æ", limit=limit, offset=offset)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ format_list
    response = format_list(records, "–£—Å–ø–µ—à–Ω–æ", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üü¢ –£—Å–ø–µ—à–Ω–æ")

    await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")


async def get_failed_list(message: Message):
    limit = 10
    offset = 0
    current_page = 1

    total_records = await count_records("üî¥ –°–ª–µ—Ç–µ–ª")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üî¥ –°–ª–µ—Ç–µ–ª", limit=limit, offset=offset)

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ format_list
    response = format_list(records, "–°–ª–µ—Ç–µ–ª–∏", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üî¥ –°–ª–µ—Ç–µ–ª")

    await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")


async def help_handler(message: Message):
    help_text = (
        "/a {–Ω–æ–º–µ—Ä} ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –æ–∂–∏–¥–∞–Ω–∏–µ.\n"
        "/c {–Ω–æ–º–µ—Ä} ‚Äî –í–∑—è—Ç—å –Ω–æ–º–µ—Ä –≤ —Ö–æ–ª–¥.\n"
        "/success {–Ω–æ–º–µ—Ä} ‚Äî –ü–æ–º–µ—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π.\n"
        "/s {–Ω–æ–º–µ—Ä} ‚Äî –ü–æ–º–µ—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π.\n"
        "/clear ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏.\n"
        "/wl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è.\n"
        "/hl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–æ–ª–¥–∞.\n"
        "/gl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.\n"
        "/sl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞."
    )
    await message.reply(help_text)
