import aioredis
from datetime import datetime, timedelta

redis = None

async def setup_redis(url: str):
    global redis
    redis = aioredis.from_url(url, decode_responses=True)

async def add_to_waiting(user, number):
    entry_key = f"number:{number}"
    await redis.hset(entry_key, mapping={
        "number": number,
        "user": user,
        "status": "üîµ –û–∂–∏–¥–∞–Ω–∏–µ",
        "timestamp": datetime.now().isoformat()
    })
    await redis.sadd("waiting_list", entry_key)
    await redis.expire(entry_key, 86400)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –Ω–∞ 24 —á–∞—Å–∞
    return f"–ù–æ–º–µ—Ä {number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è."

async def move_to_hold(number):
    entry_key = f"number:{number}"
    if not await redis.exists(entry_key):
        return "–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await redis.hset(entry_key, mapping={
        "status": "üü† –•–æ–ª–¥–∏–Ω–≥",
        "hold_start": datetime.now().isoformat(),
        "hold_end": (datetime.now() + timedelta(hours=3)).isoformat()
    })
    await redis.srem("waiting_list", entry_key)
    await redis.sadd("hold_list", entry_key)
    return f"–ù–æ–º–µ—Ä {number} –≤–∑—è—Ç –≤ —Ö–æ–ª–¥."

async def mark_as_successful(number):
    entry_key = f"number:{number}"
    if not await redis.exists(entry_key):
        return "–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await redis.hset(entry_key, mapping={
        "status": "üü¢ –£—Å–ø–µ—à–Ω–æ",
        "success_at": datetime.now().isoformat()
    })
    await redis.srem("hold_list", entry_key)
    await redis.sadd("successful_list", entry_key)
    return f"–ù–æ–º–µ—Ä {number} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ö–æ–ª–¥."

async def mark_as_failed(number):
    entry_key = f"number:{number}"
    if not await redis.exists(entry_key):
        return "–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."

    await redis.hset(entry_key, mapping={
        "status": "üî¥ –°–ª–µ—Ç–µ–ª",
        "failed_at": datetime.now().isoformat()
    })
    await redis.srem("hold_list", entry_key)
    await redis.sadd("failed_list", entry_key)
    return f"–ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π."

async def clear_all():
    keys = await redis.keys("number:*")
    for key in keys:
        await redis.delete(key)

    await redis.delete("waiting_list")
    await redis.delete("hold_list")
    await redis.delete("successful_list")
    await redis.delete("failed_list")
