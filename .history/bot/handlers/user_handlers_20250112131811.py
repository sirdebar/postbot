# handlers/user_handlers.py
from aiogram import Dispatcher
from aiogram.types import Message, CommandObject
from aiogram.filters import Command
from bot.database import (
    add_to_waiting, get_user_numbers, count_records, get_list_by_status, is_admin
)
from bot.utils import build_pagination_keyboard, format_list

async def add_number_handler(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: /a 123456789")
        return

    number = args[1]
    response = await add_to_waiting(message.from_user.id, number)
    await message.reply(response)

async def my_handler(message: Message, command: CommandObject):
    target_user = message.from_user
    if command.args:
        if not await is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        try:
            user_id = int(command.args)
        except ValueError:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id.")
            return
        target_user = await message.bot.get_chat(user_id)
    counts = await format_user_numbers_counts(target_user.id)
    response = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {target_user.full_name} (id: {target_user.id}):\n\n"
        f"{counts}"
    )
    await message.reply(response, parse_mode="Markdown")

async def format_user_numbers_counts(user_id):
    waiting = await count_records(user_id=user_id, status="üîµ –û–∂–∏–¥–∞–Ω–∏–µ")
    holding = await count_records(user_id=user_id, status="üü† –•–æ–ª–¥–∏–Ω–≥")
    successful = await count_records(user_id=user_id, status="üü¢ –£—Å–ø–µ—à–Ω–æ")
    failed = await count_records(user_id=user_id, status="üî¥ –°–ª–µ—Ç–µ–ª")
    return (
        f"–û–∂–∏–¥–∞–Ω–∏–µ: {waiting}\n"
        f"–•–æ–ª–¥: {holding}\n"
        f"–£—Å–ø–µ—à–Ω—ã–µ: {successful}\n"
        f"–°–ª–µ—Ç–µ–≤—à–∏–µ: {failed}"
    )

async def get_waiting_list(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    limit = 10
    offset = 0
    current_page = 1
    total_records = await count_records(status="üîµ –û–∂–∏–¥–∞–Ω–∏–µ")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üîµ –û–∂–∏–¥–∞–Ω–∏–µ", limit=limit, offset=offset)
    records = await add_user_tags(records, message.bot)
    response = format_list(records, "–û–∂–∏–¥–∞–Ω–∏–µ", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üîµ –û–∂–∏–¥–∞–Ω–∏–µ")
    await message.reply(response, reply_markup=keyboard, parse_mode="HTML")

async def get_hold_list(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    limit = 10
    offset = 0
    current_page = 1
    total_records = await count_records(status="üü† –•–æ–ª–¥–∏–Ω–≥")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üü† –•–æ–ª–¥–∏–Ω–≥", limit=limit, offset=offset)
    records = await add_user_tags(records, message.bot)
    response = format_list(records, "–•–æ–ª–¥–∏–Ω–≥", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üü† –•–æ–ª–¥–∏–Ω–≥")
    await message.reply(response, reply_markup=keyboard, parse_mode="HTML")

async def get_successful_list(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    limit = 10
    offset = 0
    current_page = 1
    total_records = await count_records(status="üü¢ –£—Å–ø–µ—à–Ω–æ")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üü¢ –£—Å–ø–µ—à–Ω–æ", limit=limit, offset=offset)
    records = await add_user_tags(records, message.bot)
    response = format_list(records, "–£—Å–ø–µ—à–Ω–æ", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üü¢ –£—Å–ø–µ—à–Ω–æ")
    await message.reply(response, reply_markup=keyboard, parse_mode="HTML")

async def get_failed_list(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    limit = 10
    offset = 0
    current_page = 1
    total_records = await count_records(status="üî¥ –°–ª–µ—Ç–µ–ª")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üî¥ –°–ª–µ—Ç–µ–ª", limit=limit, offset=offset)
    records = await add_user_tags(records, message.bot)
    response = format_list(records, "–°–ª–µ—Ç–µ–ª–∏", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üî¥ –°–ª–µ—Ç–µ–ª")
    await message.reply(response, reply_markup=keyboard, parse_mode="HTML")

async def add_user_tags(records, bot):
    for record in records:
        try:
            user = await bot.get_chat(record['user_id'])
            record['user_tag'] = f"<a href='tg://user?id={user.id}'>{user.full_name}</a>"
        except:
            record['user_tag'] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    return records

def register_user_handlers(dp: Dispatcher):
    dp.message.register(add_number_handler, Command(commands=["a"]))
    dp.message.register(my_handler, Command(commands=["my"]))
    dp.message.register(get_waiting_list, Command(commands=["wl"]))
    dp.message.register(get_hold_list, Command(commands=["hl"]))
    dp.message.register(get_successful_list, Command(commands=["gl"]))
    dp.message.register(get_failed_list, Command(commands=["sl"]))