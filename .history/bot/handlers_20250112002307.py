from aiogram import Dispatcher, Bot
from aiogram.types import Message, CallbackQuery, User, ChatMemberUpdated
from aiogram.filters import Command, CommandObject, ChatMemberUpdatedFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bot.utils import build_pagination_keyboard, format_list
from bot.database import (
    add_to_waiting, move_to_hold, mark_as_successful, mark_as_failed, clear_all,
    get_list_by_status, get_all_records, count_records, find_record_by_number,
    set_user_admin, is_admin, get_user_numbers, delete_number
)

class SearchStates(StatesGroup):
    waiting_for_number = State()

class IsNewChatMemberFilter(BaseFilter):
    async def __call__(self, event: ChatMemberUpdated) -> bool:
        return event.old_chat_member.status == "left" and event.new_chat_member.status == "member"

def setup_handlers(dp: Dispatcher, redis):

def setup_handlers(dp: Dispatcher):
    dp.message.register(search_handler, Command(commands=["search"]))
    dp.message.register(number_search_handler, SearchStates.waiting_for_number)
    dp.message.register(add_number_handler, Command(commands=["a"]))
    dp.message.register(hold_number_handler, Command(commands=["c"]))
    dp.message.register(successful_number_handler, Command(commands=["success"]))
    dp.message.register(failed_number_handler, Command(commands=["s"]))
    dp.message.register(clear_all_handler, Command(commands=["clear"]))
    dp.message.register(get_waiting_list, Command(commands=["wl"]))
    dp.message.register(get_hold_list, Command(commands=["hl"]))
    dp.message.register(get_successful_list, Command(commands=["gl"]))
    dp.message.register(get_failed_list, Command(commands=["sl"]))
    dp.message.register(list_all_handler, Command(commands=["l"]))
    dp.message.register(help_handler, Command(commands=["help"]))
    dp.message.register(admin_handler, Command(commands=["admin"]))
    dp.message.register(deladmin_handler, Command(commands=["deladmin"]))
    dp.message.register(my_handler, Command(commands=["my"]))
    dp.message.register(stata_handler, Command(commands=["stata"]))
    dp.message.register(set_hold_duration_handler, Command(commands=["h"]))
    dp.message.register(delete_number_handler, Command(commands=["aa"]))
    dp.callback_query.register(paginate_list, lambda c: c.data.startswith("page:"))
    dp.callback_query.register(search_handler, lambda c: c.data.startswith("search:"))
    dp.chat_member.register(user_joined_handler, IsNewChatMemberFilter())

async def user_joined_handler(event: ChatMemberUpdated):
    user_id = event.new_chat_member.user.id
    await set_user_admin(user_id, is_admin=False)

async def paginate_list(callback: CallbackQuery):
    _, status, current_page = callback.data.split(":")
    current_page = int(current_page)
    limit = 10
    offset = (current_page - 1) * limit

    if status == "all":
        records = await get_all_records(limit=limit, offset=offset)
        total_records = await count_records()
        title = "–û–±—â–∏–π —Å–ø–∏—Å–æ–∫"
    else:
        records = await get_list_by_status(status, limit=limit, offset=offset)
        total_records = await count_records(status=status)
        title = f"–°–ø–∏—Å–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É {status}"

    total_pages = (total_records + limit - 1) // limit

    if not records:
        response = f"{title} –ø—É—Å—Ç."
    else:
        response = format_list(records, title, current_page, total_pages)

    keyboard = build_pagination_keyboard(current_page, total_pages, status)
    await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="Markdown")

async def search_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(SearchStates.waiting_for_number)


async def number_search_handler(message: Message, state: FSMContext):
    number = message.text.strip()
    record = await find_record_by_number(number)
    if record:
        try:
            user = await message.bot.get_chat(record['user_id'])
            user_tag = f"<a href='tg://user?id={user.id}'>{user.full_name}</a>"
        except:
            user_tag = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        response = (
            f"–ù–∞–π–¥–µ–Ω –Ω–æ–º–µ—Ä:\n"
            f"ID: {record['id']}\n"
            f"–ù–æ–º–µ—Ä: {record['number']}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_tag}\n"
            f"–°—Ç–∞—Ç—É—Å: {record['status']}\n"
            f"–î–∞—Ç–∞: {record['timestamp'].strftime('%Y-%m-%d %H:%M')}"
        )
    else:
        response = f"–ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    await message.reply(response, parse_mode="HTML")
    await state.clear()

async def add_number_handler(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: /a 123456789")
        return

    number = args[1]
    response = await add_to_waiting(message.from_user.id, number)
    await message.reply(response)

async def list_all_handler(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    limit = 10
    offset = 0
    current_page = 1
    records = await get_all_records(limit=limit, offset=offset)
    total_records = await count_records()
    total_pages = (total_records + limit - 1) // limit

    if not records:
        response = "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."
    else:
        response = format_list(records, "–û–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤", current_page, total_pages)

    keyboard = build_pagination_keyboard(current_page, total_pages, status="all")
    await message.reply(response, reply_markup=keyboard, parse_mode="Markdown")

async def hold_number_handler(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: /c 123456789")
        return

    number = args[1]
    # Get global hold duration from Redis
    hold_duration_str = await redis.get("global_hold_duration")
    if hold_duration_str:
        hold_duration = int(hold_duration_str)
        hold_duration_timedelta = timedelta(hours=hold_duration)
    else:
        hold_duration_timedelta = None
    response = await move_to_hold(number, hold_duration=hold_duration_timedelta)
    await message.reply(response)


async def successful_number_handler(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: /success 123456789")
        return

    number = args[1]
    response = await mark_as_successful(number)
    await message.reply(response)

async def failed_number_handler(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: /s 123456789")
        return

    number = args[1]
    response = await mark_as_failed(number)
    await message.reply(response)

async def clear_all_handler(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    response = await clear_all()
    await message.reply(response)

async def add_user_tags(records, bot):
    for record in records:
        try:
            user = await bot.get_chat(record['user_id'])
            record['user_tag'] = f"<a href='tg://user?id={user.id}'>{user.full_name}</a>"
        except:
            record['user_tag'] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
    return records

async def get_waiting_list(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    limit = 10
    offset = 0
    current_page = 1
    total_records = await count_records(status="üîµ –û–∂–∏–¥–∞–Ω–∏–µ")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üîµ –û–∂–∏–¥–∞–Ω–∏–µ", limit=limit, offset=offset)
    records = await add_user_tags(records, message.bot)
    response = format_list(records, "–û–∂–∏–¥–∞–Ω–∏–µ", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üîµ –û–∂–∏–¥–∞–Ω–∏–µ")
    await message.reply(response, reply_markup=keyboard, parse_mode="HTML")

async def get_hold_list(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    limit = 10
    offset = 0
    current_page = 1
    total_records = await count_records(status="üü† –•–æ–ª–¥–∏–Ω–≥")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üü† –•–æ–ª–¥–∏–Ω–≥", limit=limit, offset=offset)
    records = await add_user_tags(records, message.bot)
    response = format_list(records, "–•–æ–ª–¥–∏–Ω–≥", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üü† –•–æ–ª–¥–∏–Ω–≥")
    await message.reply(response, reply_markup=keyboard, parse_mode="HTML")

async def get_successful_list(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    limit = 10
    offset = 0
    current_page = 1
    total_records = await count_records(status="üü¢ –£—Å–ø–µ—à–Ω–æ")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üü¢ –£—Å–ø–µ—à–Ω–æ", limit=limit, offset=offset)
    records = await add_user_tags(records, message.bot)
    response = format_list(records, "–£—Å–ø–µ—à–Ω–æ", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üü¢ –£—Å–ø–µ—à–Ω–æ")
    await message.reply(response, reply_markup=keyboard, parse_mode="HTML")

async def get_failed_list(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    limit = 10
    offset = 0
    current_page = 1
    total_records = await count_records(status="üî¥ –°–ª–µ—Ç–µ–ª")
    total_pages = (total_records + limit - 1) // limit
    records = await get_list_by_status("üî¥ –°–ª–µ—Ç–µ–ª", limit=limit, offset=offset)
    records = await add_user_tags(records, message.bot)
    response = format_list(records, "–°–ª–µ—Ç–µ–ª–∏", current_page, total_pages)
    keyboard = build_pagination_keyboard(current_page, total_pages, status="üî¥ –°–ª–µ—Ç–µ–ª")
    await message.reply(response, reply_markup=keyboard, parse_mode="HTML")

async def help_handler(message: Message):
    if await is_admin(message.from_user.id):
        help_text = (
            "/a {–Ω–æ–º–µ—Ä} ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –æ–∂–∏–¥–∞–Ω–∏–µ.\n"
            "/c {–Ω–æ–º–µ—Ä} ‚Äî –í–∑—è—Ç—å –Ω–æ–º–µ—Ä –≤ —Ö–æ–ª–¥.\n"
            "/success {–Ω–æ–º–µ—Ä} ‚Äî –ü–æ–º–µ—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π.\n"
            "/s {–Ω–æ–º–µ—Ä} ‚Äî –ü–æ–º–µ—Ç–∏—Ç—å –Ω–æ–º–µ—Ä –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π.\n"
            "/clear ‚Äî –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–ø–∏—Å–∫–∏.\n"
            "/wl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è.\n"
            "/hl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–æ–ª–¥–∞.\n"
            "/gl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.\n"
            "/sl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞.\n"
            "/search ‚Äî –ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä.\n"
            "/admin {user_id} ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞.\n"
            "/deladmin {user_id} ‚Äî –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞.\n"
            "/my ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
            "/my {user_id} ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "/stata ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤).\n"
            "/h {hours} ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —Ö–æ–ª–¥–∞.\n"
            "/aa {–Ω–æ–º–µ—Ä} ‚Äî –£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è."
        )
    else:
        help_text = (
            "/a {–Ω–æ–º–µ—Ä} ‚Äî –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä –≤ –æ–∂–∏–¥–∞–Ω–∏–µ.\n"
            "/wl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è.\n"
            "/hl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–æ–ª–¥–∞.\n"
            "/gl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.\n"
            "/sl ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ—Ç–µ–≤—à–∏–µ –Ω–æ–º–µ—Ä–∞.\n"
            "/search ‚Äî –ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä.\n"
            "/my ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n"
        )
    await message.reply(help_text)

async def admin_handler(message: Message, command: CommandObject):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    if not command.args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ user_id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü—Ä–∏–º–µ—Ä: /admin 123456789 –∏–ª–∏ /admin @username")
        return
    user_input = command.args
    if user_input.startswith("@"):
        # Fetch user by username
        try:
            user = await message.bot.get_chat(user_input)
            user_id = user.id
        except Exception as e:
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_input} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
    else:
        try:
            user_id = int(user_input)
        except ValueError:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –∏–ª–∏ username.")
            return
    await set_user_admin(user_id, is_admin=True)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_input} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

async def deladmin_handler(message: Message, command: CommandObject):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    if not command.args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ user_id –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! –ü—Ä–∏–º–µ—Ä: /deladmin 123456789 –∏–ª–∏ /deladmin @username")
        return
    user_input = command.args
    if user_input.startswith("@"):
        # Fetch user by username
        try:
            user = await message.bot.get_chat(user_input)
            user_id = user.id
        except Exception as e:
            await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_input} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
    else:
        try:
            user_id = int(user_input)
        except ValueError:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id –∏–ª–∏ username.")
            return
    await set_user_admin(user_id, is_admin=False)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_input} –ª–∏—à–µ–Ω –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤.")

async def my_handler(message: Message, command: CommandObject):
    target_user = message.from_user
    if command.args:
        if not await is_admin(message.from_user.id):
            await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        try:
            user_id = int(command.args)
        except ValueError:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id.")
            return
        target_user = await message.bot.get_chat(user_id)
    counts = await format_user_numbers_counts(target_user.id)
    response = (
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {target_user.full_name} (id: {target_user.id}):\n\n"
        f"{counts}"
    )
    await message.reply(response, parse_mode="Markdown")

async def format_user_numbers_counts(user_id):
    waiting = await count_records(user_id=user_id, status="üîµ –û–∂–∏–¥–∞–Ω–∏–µ")
    holding = await count_records(user_id=user_id, status="üü† –•–æ–ª–¥–∏–Ω–≥")
    successful = await count_records(user_id=user_id, status="üü¢ –£—Å–ø–µ—à–Ω–æ")
    failed = await count_records(user_id=user_id, status="üî¥ –°–ª–µ—Ç–µ–ª")
    return (
        f"–û–∂–∏–¥–∞–Ω–∏–µ: {waiting}\n"
        f"–•–æ–ª–¥: {holding}\n"
        f"–£—Å–ø–µ—à–Ω—ã–µ: {successful}\n"
        f"–°–ª–µ—Ç–µ–≤—à–∏–µ: {failed}"
    )

async def stata_handler(message: Message):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    waiting = await count_records(status="üîµ –û–∂–∏–¥–∞–Ω–∏–µ")
    holding = await count_records(status="üü† –•–æ–ª–¥–∏–Ω–≥")
    successful = await count_records(status="üü¢ –£—Å–ø–µ—à–Ω–æ")
    failed = await count_records(status="üî¥ –°–ª–µ—Ç–µ–ª")
    response = (
        f"–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–û–∂–∏–¥–∞–Ω–∏–µ: {waiting}\n"
        f"–•–æ–ª–¥: {holding}\n"
        f"–£—Å–ø–µ—à–Ω—ã–µ: {successful}\n"
        f"–°–ª–µ—Ç–µ–≤—à–∏–µ: {failed}"
    )
    await message.reply(response)

async def set_hold_duration_handler(message: Message, command: CommandObject):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    if not command.args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö! –ü—Ä–∏–º–µ—Ä: /h 3")
        return
    try:
        hours = int(command.args)
        if hours < 0:
            raise ValueError
    except ValueError:
        await message.reply("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        return
    if hours == 0:
        # Set indefinite hold
        await redis.delete("global_hold_duration")
        hold_duration = None
    else:
        hold_duration = hours
        await redis.set("global_hold_duration", hold_duration)
    await message.reply(f"–í—Ä–µ–º—è —Ö–æ–ª–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hours} —á–∞—Å–æ–≤.")

async def delete_number_handler(message: Message, command: CommandObject):
    if not await is_admin(message.from_user.id):
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    if not command.args:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä! –ü—Ä–∏–º–µ—Ä: /aa 123456789")
        return
    number = command.args
    response = await delete_number(number)
    await message.reply(response)