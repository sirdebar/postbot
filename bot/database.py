import aiosqlite
from datetime import datetime, timedelta

DB_PATH = "database.db"

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS numbers (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            number TEXT NOT NULL,
            user TEXT NOT NULL,
            status TEXT NOT NULL,
            timestamp DATETIME NOT NULL,
            hold_start DATETIME,
            hold_end DATETIME
        )
        """)
        await db.commit()

async def delete_expired_records():
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        expiration_time = datetime.now() - timedelta(days=1)
        await db.execute("DELETE FROM numbers WHERE timestamp < ?", (expiration_time,))
        await db.commit()

async def count_records(status=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–≤—Å–µ—Ö –∏–ª–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É).
    """
    async with aiosqlite.connect(DB_PATH) as db:
        if status:
            async with db.execute("SELECT COUNT(*) FROM numbers WHERE status = ?", (status,)) as cursor:
                return (await cursor.fetchone())[0]
        else:
            async with db.execute("SELECT COUNT(*) FROM numbers") as cursor:
                return (await cursor.fetchone())[0]

async def get_all_records(limit=10, offset=0):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("""
        SELECT id, number, user, status, timestamp
        FROM numbers
        ORDER BY timestamp ASC
        LIMIT ? OFFSET ?
        """, (limit, offset)) as cursor:
            return await cursor.fetchall()

async def find_record_by_number(number):
    """
    –ò—â–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ –Ω–æ–º–µ—Ä—É.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("""
        SELECT id, number, user, status, timestamp
        FROM numbers
        WHERE number = ?
        """, (number,)) as cursor:
            return await cursor.fetchone()

async def add_to_waiting(user, number):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞
        async with db.execute("SELECT id FROM numbers WHERE number = ?", (number,)) as cursor:
            if await cursor.fetchone():
                return f"–ù–æ–º–µ—Ä {number} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."

        await db.execute("""
        INSERT INTO numbers (number, user, status, timestamp)
        VALUES (?, ?, ?, ?)
        """, (number, user, "üîµ –û–∂–∏–¥–∞–Ω–∏–µ", datetime.now()))
        await db.commit()
        return f"–ù–æ–º–µ—Ä {number} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–Ω–∏—è."

async def get_list_by_status(status, limit=20, offset=0):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute("""
        SELECT id, number, user, status, timestamp 
        FROM numbers 
        WHERE status = ? 
        ORDER BY timestamp ASC 
        LIMIT ? OFFSET ?
        """, (status, limit, offset)) as cursor:
            return await cursor.fetchall()

async def move_to_hold(number):
    """
    –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –Ω–æ–º–µ—Ä –≤ —Å—Ç–∞—Ç—É—Å "–•–æ–ª–¥–∏–Ω–≥".
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        UPDATE numbers
        SET status = ?, hold_start = ?, hold_end = ?
        WHERE number = ? AND status = ?
        """, ("üü† –•–æ–ª–¥–∏–Ω–≥", datetime.now(), datetime.now() + timedelta(hours=3), number, "üîµ –û–∂–∏–¥–∞–Ω–∏–µ"))
        changes = db.total_changes
        await db.commit()
        if changes > 0:
            return f"–ù–æ–º–µ—Ä {number} –≤–∑—è—Ç –≤ —Ö–æ–ª–¥."
        return f"–ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è."

async def mark_as_successful(number):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –Ω–æ–º–µ—Ä–∞ –Ω–∞ "–£—Å–ø–µ—à–Ω–æ".
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        UPDATE numbers
        SET status = ?, hold_end = ?
        WHERE number = ? AND status = ?
        """, ("üü¢ –£—Å–ø–µ—à–Ω–æ", datetime.now(), number, "üü† –•–æ–ª–¥–∏–Ω–≥"))
        changes = db.total_changes
        await db.commit()
        if changes > 0:
            return f"–ù–æ–º–µ—Ä {number} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ö–æ–ª–¥."
        return f"–ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ö–æ–ª–¥–∞."

async def mark_as_failed(number):
    """
    –ü–æ–º–µ—á–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–∞–∫ "–°–ª–µ—Ç–µ–≤—à–∏–π".
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("""
        UPDATE numbers
        SET status = ?, hold_end = ?
        WHERE number = ? AND status = ?
        """, ("üî¥ –°–ª–µ—Ç–µ–ª", datetime.now(), number, "üü† –•–æ–ª–¥–∏–Ω–≥"))
        changes = db.total_changes
        await db.commit()
        if changes > 0:
            return f"–ù–æ–º–µ—Ä {number} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–ª–µ—Ç–µ–≤—à–∏–π."
        return f"–ù–æ–º–µ—Ä {number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —Ö–æ–ª–¥–∞."

async def clear_all():
    """
    –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏.
    """
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute("DELETE FROM numbers")
        await db.commit()
        return "–í—Å–µ —Å–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω—ã."

